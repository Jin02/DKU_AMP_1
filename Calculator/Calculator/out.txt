--------- Init ---------
all clear register
all clear memory
sp : 0x8000
ra : 0xffffffff
Load .bin file : /Users/jin/Project/DKU_AMP_1/Calculator/Calculator/input2.bin
This system is based little endian. so, I will convert this data to big endian format
--------- Done ---------


--------- System Start ---------
Cycle Num	| 0
State Change	| System Start -> Fetch State
PC		| 0x0
Instruction	| 0x27bdffd8

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffd8 / zeroExtImm 0xffd8 / branchAddr 0xffffff60
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x8000) + 0xffffffd8 = 0x7fd8



Cycle Num	| 1
State Change	| Execute -> Fetch State
PC		| 0x4
Instruction	| 0xafbf0024

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x24 / zeroExtImm 0x24 / branchAddr 0x90
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7fd8) + 0x24) = 0x7ffc] = R[31](0xffffffff)



Cycle Num	| 2
State Change	| Execute -> Fetch State
PC		| 0x8
Instruction	| 0xafbe0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7fd8) + 0x20) = 0x7ff8] = R[30](0x0)



Cycle Num	| 3
State Change	| Execute -> Fetch State
PC		| 0xc
Instruction	| 0x3a0f021

State Change	| Fetch -> Decode State
R Type		| rd 0x1e / rs 0x1d / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[30] = R[29](0x7fd8) + R[0](0x0) = 0x7fd8



Cycle Num	| 4
State Change	| Execute -> Fetch State
PC		| 0x10
Instruction	| 0xafc00018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7fd8) + 0x18) = 0x7ff0] = R[0](0x0)



Cycle Num	| 5
State Change	| Execute -> Fetch State
PC		| 0x14
Instruction	| 0x24040005

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x5 / zeroExtImm 0x5 / branchAddr 0x14
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[4] = R[0](0x0) + 0x5 = 0x5



Cycle Num	| 6
State Change	| Execute -> Fetch State
PC		| 0x18
Instruction	| 0xc000010

State Change	| Fetch -> Decode State
Instruction	| JumpAndLink

State Change	| Decode -> Execute State
R[31] = PC + 8; PC = JumpAddr
R[31] = 0x20; PC = 0x40



Cycle Num	| 7
State Change	| Execute -> Fetch State
PC		| 0x40
Instruction	| 0x27bdffe0

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffe0 / zeroExtImm 0xffe0 / branchAddr 0xffffff80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7fd8) + 0xffffffe0 = 0x7fb8



Cycle Num	| 8
State Change	| Execute -> Fetch State
PC		| 0x44
Instruction	| 0xafbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7fb8) + 0x1c) = 0x7fd4] = R[31](0x20)



Cycle Num	| 9
State Change	| Execute -> Fetch State
PC		| 0x48
Instruction	| 0xafbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7fb8) + 0x18) = 0x7fd0] = R[30](0x7fd8)



Cycle Num	| 10
State Change	| Execute -> Fetch State
PC		| 0x4c
Instruction	| 0x3a0f021

State Change	| Fetch -> Decode State
R Type		| rd 0x1e / rs 0x1d / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[30] = R[29](0x7fb8) + R[0](0x0) = 0x7fb8



Cycle Num	| 11
State Change	| Execute -> Fetch State
PC		| 0x50
Instruction	| 0xafc40020

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7fb8) + 0x20) = 0x7fd8] = R[4](0x5)



Cycle Num	| 12
State Change	| Execute -> Fetch State
PC		| 0x54
Instruction	| 0x8fc30020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[3] = M[R[30](0x7fb8) + 0x20] = 0x5



Cycle Num	| 13
State Change	| Execute -> Fetch State
PC		| 0x58
Instruction	| 0x24020001

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x1 / zeroExtImm 0x1 / branchAddr 0x4
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[0](0x0) + 0x1 = 0x1



Cycle Num	| 14
State Change	| Execute -> Fetch State
PC		| 0x5c
Instruction	| 0x14620004

State Change	| Fetch -> Decode State
I Type		| opcode 0x5 / signExtImm 0x4 / zeroExtImm 0x4 / branchAddr 0x10
Instruction	| BranchOnNotEqual

State Change	| Decode -> Execute State
if(R[rs] != R[rt])	PC = PC + 4 + BranchAddr
if(R[3](0x5) != R[2](0x1))	PC = {0x5c + 4 + 0x10}(0x70)



Cycle Num	| 15
State Change	| Execute -> Fetch State
PC		| 0x70
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7fb8) + 0x20] = 0x5



Cycle Num	| 16
State Change	| Execute -> Fetch State
PC		| 0x74
Instruction	| 0x2442ffff

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffff / zeroExtImm 0xffff / branchAddr 0xfffffffc
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[2](0x5) + 0xffffffff = 0x4



Cycle Num	| 17
State Change	| Execute -> Fetch State
PC		| 0x78
Instruction	| 0x402021

State Change	| Fetch -> Decode State
R Type		| rd 0x4 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[4] = R[2](0x4) + R[0](0x0) = 0x4



Cycle Num	| 18
State Change	| Execute -> Fetch State
PC		| 0x7c
Instruction	| 0xc000010

State Change	| Fetch -> Decode State
Instruction	| JumpAndLink

State Change	| Decode -> Execute State
R[31] = PC + 8; PC = JumpAddr
R[31] = 0x84; PC = 0x40



Cycle Num	| 19
State Change	| Execute -> Fetch State
PC		| 0x40
Instruction	| 0x27bdffe0

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffe0 / zeroExtImm 0xffe0 / branchAddr 0xffffff80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7fb8) + 0xffffffe0 = 0x7f98



Cycle Num	| 20
State Change	| Execute -> Fetch State
PC		| 0x44
Instruction	| 0xafbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f98) + 0x1c) = 0x7fb4] = R[31](0x84)



Cycle Num	| 21
State Change	| Execute -> Fetch State
PC		| 0x48
Instruction	| 0xafbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f98) + 0x18) = 0x7fb0] = R[30](0x7fb8)



Cycle Num	| 22
State Change	| Execute -> Fetch State
PC		| 0x4c
Instruction	| 0x3a0f021

State Change	| Fetch -> Decode State
R Type		| rd 0x1e / rs 0x1d / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[30] = R[29](0x7f98) + R[0](0x0) = 0x7f98



Cycle Num	| 23
State Change	| Execute -> Fetch State
PC		| 0x50
Instruction	| 0xafc40020

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7f98) + 0x20) = 0x7fb8] = R[4](0x4)



Cycle Num	| 24
State Change	| Execute -> Fetch State
PC		| 0x54
Instruction	| 0x8fc30020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[3] = M[R[30](0x7f98) + 0x20] = 0x4



Cycle Num	| 25
State Change	| Execute -> Fetch State
PC		| 0x58
Instruction	| 0x24020001

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x1 / zeroExtImm 0x1 / branchAddr 0x4
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[0](0x0) + 0x1 = 0x1



Cycle Num	| 26
State Change	| Execute -> Fetch State
PC		| 0x5c
Instruction	| 0x14620004

State Change	| Fetch -> Decode State
I Type		| opcode 0x5 / signExtImm 0x4 / zeroExtImm 0x4 / branchAddr 0x10
Instruction	| BranchOnNotEqual

State Change	| Decode -> Execute State
if(R[rs] != R[rt])	PC = PC + 4 + BranchAddr
if(R[3](0x4) != R[2](0x1))	PC = {0x5c + 4 + 0x10}(0x70)



Cycle Num	| 27
State Change	| Execute -> Fetch State
PC		| 0x70
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7f98) + 0x20] = 0x4



Cycle Num	| 28
State Change	| Execute -> Fetch State
PC		| 0x74
Instruction	| 0x2442ffff

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffff / zeroExtImm 0xffff / branchAddr 0xfffffffc
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[2](0x4) + 0xffffffff = 0x3



Cycle Num	| 29
State Change	| Execute -> Fetch State
PC		| 0x78
Instruction	| 0x402021

State Change	| Fetch -> Decode State
R Type		| rd 0x4 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[4] = R[2](0x3) + R[0](0x0) = 0x3



Cycle Num	| 30
State Change	| Execute -> Fetch State
PC		| 0x7c
Instruction	| 0xc000010

State Change	| Fetch -> Decode State
Instruction	| JumpAndLink

State Change	| Decode -> Execute State
R[31] = PC + 8; PC = JumpAddr
R[31] = 0x84; PC = 0x40



Cycle Num	| 31
State Change	| Execute -> Fetch State
PC		| 0x40
Instruction	| 0x27bdffe0

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffe0 / zeroExtImm 0xffe0 / branchAddr 0xffffff80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f98) + 0xffffffe0 = 0x7f78



Cycle Num	| 32
State Change	| Execute -> Fetch State
PC		| 0x44
Instruction	| 0xafbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f78) + 0x1c) = 0x7f94] = R[31](0x84)



Cycle Num	| 33
State Change	| Execute -> Fetch State
PC		| 0x48
Instruction	| 0xafbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f78) + 0x18) = 0x7f90] = R[30](0x7f98)



Cycle Num	| 34
State Change	| Execute -> Fetch State
PC		| 0x4c
Instruction	| 0x3a0f021

State Change	| Fetch -> Decode State
R Type		| rd 0x1e / rs 0x1d / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[30] = R[29](0x7f78) + R[0](0x0) = 0x7f78



Cycle Num	| 35
State Change	| Execute -> Fetch State
PC		| 0x50
Instruction	| 0xafc40020

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7f78) + 0x20) = 0x7f98] = R[4](0x3)



Cycle Num	| 36
State Change	| Execute -> Fetch State
PC		| 0x54
Instruction	| 0x8fc30020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[3] = M[R[30](0x7f78) + 0x20] = 0x3



Cycle Num	| 37
State Change	| Execute -> Fetch State
PC		| 0x58
Instruction	| 0x24020001

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x1 / zeroExtImm 0x1 / branchAddr 0x4
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[0](0x0) + 0x1 = 0x1



Cycle Num	| 38
State Change	| Execute -> Fetch State
PC		| 0x5c
Instruction	| 0x14620004

State Change	| Fetch -> Decode State
I Type		| opcode 0x5 / signExtImm 0x4 / zeroExtImm 0x4 / branchAddr 0x10
Instruction	| BranchOnNotEqual

State Change	| Decode -> Execute State
if(R[rs] != R[rt])	PC = PC + 4 + BranchAddr
if(R[3](0x3) != R[2](0x1))	PC = {0x5c + 4 + 0x10}(0x70)



Cycle Num	| 39
State Change	| Execute -> Fetch State
PC		| 0x70
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7f78) + 0x20] = 0x3



Cycle Num	| 40
State Change	| Execute -> Fetch State
PC		| 0x74
Instruction	| 0x2442ffff

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffff / zeroExtImm 0xffff / branchAddr 0xfffffffc
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[2](0x3) + 0xffffffff = 0x2



Cycle Num	| 41
State Change	| Execute -> Fetch State
PC		| 0x78
Instruction	| 0x402021

State Change	| Fetch -> Decode State
R Type		| rd 0x4 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[4] = R[2](0x2) + R[0](0x0) = 0x2



Cycle Num	| 42
State Change	| Execute -> Fetch State
PC		| 0x7c
Instruction	| 0xc000010

State Change	| Fetch -> Decode State
Instruction	| JumpAndLink

State Change	| Decode -> Execute State
R[31] = PC + 8; PC = JumpAddr
R[31] = 0x84; PC = 0x40



Cycle Num	| 43
State Change	| Execute -> Fetch State
PC		| 0x40
Instruction	| 0x27bdffe0

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffe0 / zeroExtImm 0xffe0 / branchAddr 0xffffff80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f78) + 0xffffffe0 = 0x7f58



Cycle Num	| 44
State Change	| Execute -> Fetch State
PC		| 0x44
Instruction	| 0xafbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f58) + 0x1c) = 0x7f74] = R[31](0x84)



Cycle Num	| 45
State Change	| Execute -> Fetch State
PC		| 0x48
Instruction	| 0xafbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f58) + 0x18) = 0x7f70] = R[30](0x7f78)



Cycle Num	| 46
State Change	| Execute -> Fetch State
PC		| 0x4c
Instruction	| 0x3a0f021

State Change	| Fetch -> Decode State
R Type		| rd 0x1e / rs 0x1d / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[30] = R[29](0x7f58) + R[0](0x0) = 0x7f58



Cycle Num	| 47
State Change	| Execute -> Fetch State
PC		| 0x50
Instruction	| 0xafc40020

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7f58) + 0x20) = 0x7f78] = R[4](0x2)



Cycle Num	| 48
State Change	| Execute -> Fetch State
PC		| 0x54
Instruction	| 0x8fc30020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[3] = M[R[30](0x7f58) + 0x20] = 0x2



Cycle Num	| 49
State Change	| Execute -> Fetch State
PC		| 0x58
Instruction	| 0x24020001

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x1 / zeroExtImm 0x1 / branchAddr 0x4
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[0](0x0) + 0x1 = 0x1



Cycle Num	| 50
State Change	| Execute -> Fetch State
PC		| 0x5c
Instruction	| 0x14620004

State Change	| Fetch -> Decode State
I Type		| opcode 0x5 / signExtImm 0x4 / zeroExtImm 0x4 / branchAddr 0x10
Instruction	| BranchOnNotEqual

State Change	| Decode -> Execute State
if(R[rs] != R[rt])	PC = PC + 4 + BranchAddr
if(R[3](0x2) != R[2](0x1))	PC = {0x5c + 4 + 0x10}(0x70)



Cycle Num	| 51
State Change	| Execute -> Fetch State
PC		| 0x70
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7f58) + 0x20] = 0x2



Cycle Num	| 52
State Change	| Execute -> Fetch State
PC		| 0x74
Instruction	| 0x2442ffff

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffff / zeroExtImm 0xffff / branchAddr 0xfffffffc
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[2](0x2) + 0xffffffff = 0x1



Cycle Num	| 53
State Change	| Execute -> Fetch State
PC		| 0x78
Instruction	| 0x402021

State Change	| Fetch -> Decode State
R Type		| rd 0x4 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[4] = R[2](0x1) + R[0](0x0) = 0x1



Cycle Num	| 54
State Change	| Execute -> Fetch State
PC		| 0x7c
Instruction	| 0xc000010

State Change	| Fetch -> Decode State
Instruction	| JumpAndLink

State Change	| Decode -> Execute State
R[31] = PC + 8; PC = JumpAddr
R[31] = 0x84; PC = 0x40



Cycle Num	| 55
State Change	| Execute -> Fetch State
PC		| 0x40
Instruction	| 0x27bdffe0

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0xffffffe0 / zeroExtImm 0xffe0 / branchAddr 0xffffff80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f58) + 0xffffffe0 = 0x7f38



Cycle Num	| 56
State Change	| Execute -> Fetch State
PC		| 0x44
Instruction	| 0xafbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f38) + 0x1c) = 0x7f54] = R[31](0x84)



Cycle Num	| 57
State Change	| Execute -> Fetch State
PC		| 0x48
Instruction	| 0xafbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[29](0x7f38) + 0x18) = 0x7f50] = R[30](0x7f58)



Cycle Num	| 58
State Change	| Execute -> Fetch State
PC		| 0x4c
Instruction	| 0x3a0f021

State Change	| Fetch -> Decode State
R Type		| rd 0x1e / rs 0x1d / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[30] = R[29](0x7f38) + R[0](0x0) = 0x7f38



Cycle Num	| 59
State Change	| Execute -> Fetch State
PC		| 0x50
Instruction	| 0xafc40020

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7f38) + 0x20) = 0x7f58] = R[4](0x1)



Cycle Num	| 60
State Change	| Execute -> Fetch State
PC		| 0x54
Instruction	| 0x8fc30020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[3] = M[R[30](0x7f38) + 0x20] = 0x1



Cycle Num	| 61
State Change	| Execute -> Fetch State
PC		| 0x58
Instruction	| 0x24020001

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x1 / zeroExtImm 0x1 / branchAddr 0x4
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[0](0x0) + 0x1 = 0x1



Cycle Num	| 62
State Change	| Execute -> Fetch State
PC		| 0x5c
Instruction	| 0x14620004

State Change	| Fetch -> Decode State
I Type		| opcode 0x5 / signExtImm 0x4 / zeroExtImm 0x4 / branchAddr 0x10
Instruction	| BranchOnNotEqual

State Change	| Decode -> Execute State
if(R[rs] != R[rt])	PC = PC + 4 + BranchAddr
if(R[3](0x1) != R[2](0x1))	PC = {0x5c + 4 + 0x10}(0x70)



Cycle Num	| 63
State Change	| Execute -> Fetch State
PC		| 0x60
Instruction	| 0x0

nop, skip decode, execution
Cycle Num	| 64
State Change	| NOP -> Fetch State
PC		| 0x64
Instruction	| 0x24020001

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x1 / zeroExtImm 0x1 / branchAddr 0x4
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[2] = R[0](0x0) + 0x1 = 0x1



Cycle Num	| 65
State Change	| Execute -> Fetch State
PC		| 0x68
Instruction	| 0x8000024

State Change	| Fetch -> Decode State
Instruction	| Jump

State Change	| Decode -> Execute State
PC = JumpAddr
PC = 0x90



Cycle Num	| 66
State Change	| Execute -> Fetch State
PC		| 0x90
Instruction	| 0x3c0e821

State Change	| Fetch -> Decode State
R Type		| rd 0x1d / rs 0x1e / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[29] = R[30](0x7f38) + R[0](0x0) = 0x7f38



Cycle Num	| 67
State Change	| Execute -> Fetch State
PC		| 0x94
Instruction	| 0x8fbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[31] = M[R[29](0x7f38) + 0x1c] = 0x84



Cycle Num	| 68
State Change	| Execute -> Fetch State
PC		| 0x98
Instruction	| 0x8fbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[30] = M[R[29](0x7f38) + 0x18] = 0x7f58



Cycle Num	| 69
State Change	| Execute -> Fetch State
PC		| 0x9c
Instruction	| 0x27bd0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f38) + 0x20 = 0x7f58



Cycle Num	| 70
State Change	| Execute -> Fetch State
PC		| 0xa0
Instruction	| 0x3e00008

State Change	| Fetch -> Decode State
R Type		| rd 0x0 / rs 0x1f / rt 0x0 / shamt 0x0 / funct 0x8
Instruction	| JumpRegister

State Change	| Decode -> Execute State
PC = R[rs]
PC = R[31](0x84)



Cycle Num	| 71
State Change	| Execute -> Fetch State
PC		| 0x84
Instruction	| 0x401821

State Change	| Fetch -> Decode State
R Type		| rd 0x3 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[3] = R[2](0x1) + R[0](0x0) = 0x1



Cycle Num	| 72
State Change	| Execute -> Fetch State
PC		| 0x88
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7f58) + 0x20] = 0x2



Cycle Num	| 73
State Change	| Execute -> Fetch State
PC		| 0x8c
Instruction	| 0x70621002

State Change	| Fetch -> Decode State
I Type		| opcode 0x1c / signExtImm 0x1002 / zeroExtImm 0x1002 / branchAddr 0x4008
 / funct 0x%x
Instruction	| Multiply32BitRes

State Change	| Decode -> Execute State
R[rd] = R[rs] * R[rt]
R[2] = R[3](0x1) * R[2](0x2) = 0x2



Cycle Num	| 74
State Change	| Execute -> Fetch State
PC		| 0x90
Instruction	| 0x3c0e821

State Change	| Fetch -> Decode State
R Type		| rd 0x1d / rs 0x1e / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[29] = R[30](0x7f58) + R[0](0x0) = 0x7f58



Cycle Num	| 75
State Change	| Execute -> Fetch State
PC		| 0x94
Instruction	| 0x8fbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[31] = M[R[29](0x7f58) + 0x1c] = 0x84



Cycle Num	| 76
State Change	| Execute -> Fetch State
PC		| 0x98
Instruction	| 0x8fbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[30] = M[R[29](0x7f58) + 0x18] = 0x7f78



Cycle Num	| 77
State Change	| Execute -> Fetch State
PC		| 0x9c
Instruction	| 0x27bd0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f58) + 0x20 = 0x7f78



Cycle Num	| 78
State Change	| Execute -> Fetch State
PC		| 0xa0
Instruction	| 0x3e00008

State Change	| Fetch -> Decode State
R Type		| rd 0x0 / rs 0x1f / rt 0x0 / shamt 0x0 / funct 0x8
Instruction	| JumpRegister

State Change	| Decode -> Execute State
PC = R[rs]
PC = R[31](0x84)



Cycle Num	| 79
State Change	| Execute -> Fetch State
PC		| 0x84
Instruction	| 0x401821

State Change	| Fetch -> Decode State
R Type		| rd 0x3 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[3] = R[2](0x2) + R[0](0x0) = 0x2



Cycle Num	| 80
State Change	| Execute -> Fetch State
PC		| 0x88
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7f78) + 0x20] = 0x3



Cycle Num	| 81
State Change	| Execute -> Fetch State
PC		| 0x8c
Instruction	| 0x70621002

State Change	| Fetch -> Decode State
I Type		| opcode 0x1c / signExtImm 0x1002 / zeroExtImm 0x1002 / branchAddr 0x4008
 / funct 0x%x
Instruction	| Multiply32BitRes

State Change	| Decode -> Execute State
R[rd] = R[rs] * R[rt]
R[2] = R[3](0x2) * R[2](0x3) = 0x6



Cycle Num	| 82
State Change	| Execute -> Fetch State
PC		| 0x90
Instruction	| 0x3c0e821

State Change	| Fetch -> Decode State
R Type		| rd 0x1d / rs 0x1e / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[29] = R[30](0x7f78) + R[0](0x0) = 0x7f78



Cycle Num	| 83
State Change	| Execute -> Fetch State
PC		| 0x94
Instruction	| 0x8fbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[31] = M[R[29](0x7f78) + 0x1c] = 0x84



Cycle Num	| 84
State Change	| Execute -> Fetch State
PC		| 0x98
Instruction	| 0x8fbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[30] = M[R[29](0x7f78) + 0x18] = 0x7f98



Cycle Num	| 85
State Change	| Execute -> Fetch State
PC		| 0x9c
Instruction	| 0x27bd0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f78) + 0x20 = 0x7f98



Cycle Num	| 86
State Change	| Execute -> Fetch State
PC		| 0xa0
Instruction	| 0x3e00008

State Change	| Fetch -> Decode State
R Type		| rd 0x0 / rs 0x1f / rt 0x0 / shamt 0x0 / funct 0x8
Instruction	| JumpRegister

State Change	| Decode -> Execute State
PC = R[rs]
PC = R[31](0x84)



Cycle Num	| 87
State Change	| Execute -> Fetch State
PC		| 0x84
Instruction	| 0x401821

State Change	| Fetch -> Decode State
R Type		| rd 0x3 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[3] = R[2](0x6) + R[0](0x0) = 0x6



Cycle Num	| 88
State Change	| Execute -> Fetch State
PC		| 0x88
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7f98) + 0x20] = 0x4



Cycle Num	| 89
State Change	| Execute -> Fetch State
PC		| 0x8c
Instruction	| 0x70621002

State Change	| Fetch -> Decode State
I Type		| opcode 0x1c / signExtImm 0x1002 / zeroExtImm 0x1002 / branchAddr 0x4008
 / funct 0x%x
Instruction	| Multiply32BitRes

State Change	| Decode -> Execute State
R[rd] = R[rs] * R[rt]
R[2] = R[3](0x6) * R[2](0x4) = 0x18



Cycle Num	| 90
State Change	| Execute -> Fetch State
PC		| 0x90
Instruction	| 0x3c0e821

State Change	| Fetch -> Decode State
R Type		| rd 0x1d / rs 0x1e / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[29] = R[30](0x7f98) + R[0](0x0) = 0x7f98



Cycle Num	| 91
State Change	| Execute -> Fetch State
PC		| 0x94
Instruction	| 0x8fbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[31] = M[R[29](0x7f98) + 0x1c] = 0x84



Cycle Num	| 92
State Change	| Execute -> Fetch State
PC		| 0x98
Instruction	| 0x8fbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[30] = M[R[29](0x7f98) + 0x18] = 0x7fb8



Cycle Num	| 93
State Change	| Execute -> Fetch State
PC		| 0x9c
Instruction	| 0x27bd0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7f98) + 0x20 = 0x7fb8



Cycle Num	| 94
State Change	| Execute -> Fetch State
PC		| 0xa0
Instruction	| 0x3e00008

State Change	| Fetch -> Decode State
R Type		| rd 0x0 / rs 0x1f / rt 0x0 / shamt 0x0 / funct 0x8
Instruction	| JumpRegister

State Change	| Decode -> Execute State
PC = R[rs]
PC = R[31](0x84)



Cycle Num	| 95
State Change	| Execute -> Fetch State
PC		| 0x84
Instruction	| 0x401821

State Change	| Fetch -> Decode State
R Type		| rd 0x3 / rs 0x2 / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[3] = R[2](0x18) + R[0](0x0) = 0x18



Cycle Num	| 96
State Change	| Execute -> Fetch State
PC		| 0x88
Instruction	| 0x8fc20020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7fb8) + 0x20] = 0x5



Cycle Num	| 97
State Change	| Execute -> Fetch State
PC		| 0x8c
Instruction	| 0x70621002

State Change	| Fetch -> Decode State
I Type		| opcode 0x1c / signExtImm 0x1002 / zeroExtImm 0x1002 / branchAddr 0x4008
 / funct 0x%x
Instruction	| Multiply32BitRes

State Change	| Decode -> Execute State
R[rd] = R[rs] * R[rt]
R[2] = R[3](0x18) * R[2](0x5) = 0x78



Cycle Num	| 98
State Change	| Execute -> Fetch State
PC		| 0x90
Instruction	| 0x3c0e821

State Change	| Fetch -> Decode State
R Type		| rd 0x1d / rs 0x1e / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[29] = R[30](0x7fb8) + R[0](0x0) = 0x7fb8



Cycle Num	| 99
State Change	| Execute -> Fetch State
PC		| 0x94
Instruction	| 0x8fbf001c

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x1c / zeroExtImm 0x1c / branchAddr 0x70
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[31] = M[R[29](0x7fb8) + 0x1c] = 0x20



Cycle Num	| 100
State Change	| Execute -> Fetch State
PC		| 0x98
Instruction	| 0x8fbe0018

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[30] = M[R[29](0x7fb8) + 0x18] = 0x7fd8



Cycle Num	| 101
State Change	| Execute -> Fetch State
PC		| 0x9c
Instruction	| 0x27bd0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7fb8) + 0x20 = 0x7fd8



Cycle Num	| 102
State Change	| Execute -> Fetch State
PC		| 0xa0
Instruction	| 0x3e00008

State Change	| Fetch -> Decode State
R Type		| rd 0x0 / rs 0x1f / rt 0x0 / shamt 0x0 / funct 0x8
Instruction	| JumpRegister

State Change	| Decode -> Execute State
PC = R[rs]
PC = R[31](0x20)



Cycle Num	| 103
State Change	| Execute -> Fetch State
PC		| 0x20
Instruction	| 0xafc20018

State Change	| Fetch -> Decode State
I Type		| opcode 0x2b / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| StoreWord

State Change	| Decode -> Execute State
M[R[rs] + SignExtImm] = R[rt]
M[(R[30](0x7fd8) + 0x18) = 0x7ff0] = R[2](0x78)



Cycle Num	| 104
State Change	| Execute -> Fetch State
PC		| 0x24
Instruction	| 0x8fc20018

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x18 / zeroExtImm 0x18 / branchAddr 0x60
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[2] = M[R[30](0x7fd8) + 0x18] = 0x78



Cycle Num	| 105
State Change	| Execute -> Fetch State
PC		| 0x28
Instruction	| 0x3c0e821

State Change	| Fetch -> Decode State
R Type		| rd 0x1d / rs 0x1e / rt 0x0 / shamt 0x0 / funct 0x21
Instruction	| AddUnsigned

State Change	| Decode -> Execute State
R[rd] = R[rs] + R[rt]
R[29] = R[30](0x7fd8) + R[0](0x0) = 0x7fd8



Cycle Num	| 106
State Change	| Execute -> Fetch State
PC		| 0x2c
Instruction	| 0x8fbf0024

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x24 / zeroExtImm 0x24 / branchAddr 0x90
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[31] = M[R[29](0x7fd8) + 0x24] = 0xffffffff



Cycle Num	| 107
State Change	| Execute -> Fetch State
PC		| 0x30
Instruction	| 0x8fbe0020

State Change	| Fetch -> Decode State
I Type		| opcode 0x23 / signExtImm 0x20 / zeroExtImm 0x20 / branchAddr 0x80
Instruction	| LoadWord

State Change	| Decode -> Execute State
R[rt] = M[R[rs] + SignExtImmm]
R[30] = M[R[29](0x7fd8) + 0x20] = 0x0



Cycle Num	| 108
State Change	| Execute -> Fetch State
PC		| 0x34
Instruction	| 0x27bd0028

State Change	| Fetch -> Decode State
I Type		| opcode 0x9 / signExtImm 0x28 / zeroExtImm 0x28 / branchAddr 0xa0
Instruction	| AddImmediateUnsigned

State Change	| Decode -> Execute State
R[rt] = R[rs] + SignExtImm
R[29] = R[29](0x7fd8) + 0x28 = 0x8000



Cycle Num	| 109
State Change	| Execute -> Fetch State
PC		| 0x38
Instruction	| 0x3e00008

State Change	| Fetch -> Decode State
R Type		| rd 0x0 / rs 0x1f / rt 0x0 / shamt 0x0 / funct 0x8
Instruction	| JumpRegister

State Change	| Decode -> Execute State
PC = R[rs]
PC = R[31](0xffffffff)



Final Return Value is 0x78(v0)
--------- System End ---------
